
1.
console.log(1)
const promise = new Promise((resolve) => {
  console.log(2)
  resolve()
  console.log(3)
})

console.log(4)

promise.then(() => {
  console.log(5)
}).then(() => {
  console.log(6)
})

console.log(7)

setTimeout(() => {
  console.log(8)
}, 10)

setTimeout(() => {
  console.log(9)
}, 0)

// output 
1
2
3
4
7
5
6
9
8


2. new Promise((resolve, reject) => {
  resolve(1)
  resolve(2)
  reject('error')
}).then((value) => {
  console.log(value)
}, (error) => {
  console.log('error')
})

output: 1 
A Promise can only be settled once (either resolved or rejected).
In this code:
resolve(1) is called first, so the Promise gets resolved with the value 1.
resolve(2) and reject('error') are ignored because the Promise is already settled.
In the .then(...) block:
The first function ((value) => { console.log(value) }) is called with value = 1.
The second function ((error) => { console.log('error') }) is not called because there's no error.

